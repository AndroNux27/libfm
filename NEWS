Changes on 1.2.0 since 1.1.0:

* ABI bumped to 4.

* Added 'auto_selection_delay' option into config file, defaulted to 600,
    which defines interval in milliseconds before folder item is selected
    in single-click mode. Setting to 0 disables autoselection.

* Added 'drop_default_action' option into config file, which defines how
    to act when some file(s) were dropped onto destination widget and no
    modificator key was pressed. Default is 0 (Auto).

* Added 'confirm_trash' option into config file, defaulted to true, which
    defines whether moving files to trash can should be confirmed by the
    user. Previously this confirmation was defined by the 'confirm_del'
    option but now those two are separated.

* Added 'show_full_names' option into config file, defaulted to false,
    which defines whether long names in icon view should be shown as it
    is or truncated to reasonable height.

* The Places View made customizable. New section '[places]' added into
    config file with an option for each standard item (Home, Desktop,
    Trash, and Applications).

* Context Menu on selected files now available by Shift+Menu keypress.

* Implemented reordering bookmarks in Places View via context menu.

* Greatly improved accessibility on every widget.

* Added an option 'Add to Bookmarks' into file context menu. Available
    only if exactly one file is selected and that file is a directory.

* Implemented dropping files onto Directory Tree View (sidebar) items.

* Added terminal list file. There is no need to add '-e %s' or similar
    to 'terminal' config file statement, it will be ignored from now on
    but predefined command line options from terminal list file will be
    used instead.

* Added possibility to keep terminal window open after command execution.
    It depends on chosen terminal though: some terminals allow this (such
    as xterm, konsole, urxvt) but some doesn't (lxterminal).

* Added optional program name for custom application. If no program name
    is entered then application's association with mime type will be not
    remembered and created application desktop entry file will be removed
    from user's applications directory. Otherwise entered name will be
    shown in list of applications for that mime type instead of file name
    (that was old behavior).

* New class FmTemplate for full templates support. Templates support also
    added into folder context menu replacing old hardcoded menu for the
    Empty Text File and Shortcut. To be more lightweight it is created
    once per folder view and isn't updated if user added or removed some
    template while the view window is still opened. If this will cause
    any inconveniences this behavior may be changed but that will make
    the folder context menu less lightweight to appear.

* Added 'only_user_templates' option into config file, defaulted to false,
    which defines whether only user defined templates should be shown in
    the folder context menu or system defined should be shown too.

* Added 'template_run_app' option into config file, defaulted to false,
    which defines whether default application for appropriate MIME type
    should be ran after successful creation of file from template. There
    is also button in the dialog to change this default per creation.

* Added 'template_type_once' option into config file, defaulted to false,
    which defines two modes for templates appearance. If this option is
    set to false then only those duplicates will be ignored which have
    the same file name, and label in popup list will be set to template
    file name without last suffix. If this option is set to true then
    only one template of each MIME type will be shown, it will have label
    from MIME type description. In both cases if any search directory has
    desktop entry matching this template (or template itself is defined
    by the desktop entry file) then value of 'Name' from it will override
    that autogenerated label.

* Added a possibility to have tooltips in popups (GTK itself has no such
    possibility).

* Added menu item "Empty File" back into folder context menu.

* The 'no_usb_trash' option now has default to 1.

* Added support to remember columns width for FmFolverView. The columns
    widths are changeable only in Detailed List View though. Any change
    in columns layout will emit a "columns-changed" signal so application
    may connect handler to it and save columns layout into config file.

* Implemented columns extension APIs which allows application to add own
    custom columns into any FmFolderModel - it registers handler for such
    column and any view which uses the model can use it after that.

* Thumbnails loader code moved from libfm-gtk into libfm. Application
    can use custom image callbacks therefore external thumbnailers can be
    called independent from application-specific image representation,
    thumbnail generator will create thumbnail file and that thumbnail
    will be loaded outside of libfm.

* Setting 'thumbnail_max' to 0 will mean unlimited size from now on.

* Added file properties dialog extension API. Application can add own
    handler to modify file properties dialog for certain MIME type files.

* Implemented file properties dialog extension for desktop entry file
    type - opening file properties dialog for single desktop entry will
    be extended by third tab ('Desktop Entry') with few desktop entry
    properties such as command to execute. Icon also becomes clickable
    (and focusable as well, can be activated by Space key when focused),
    activation will present icon choose dialog. The implementation was
    partially taken from LXShortcut utility.


Changes on 1.1.0 since 1.0.1:

* Added 'no_usb_trash' option into config file, defaulted to 0, which
    defines whether skip trashing files on removable media or not. If
    defined to skip then files will go into "trash-unsupported" and user
    will be asked by fm_file_ops_job_run_with_progress() to remove them
    instead.

* Added 'no_child_non_expandable' option into config file, defaulted to
    0, which adds feature to hide expanders on non-expandable rows so no
    extra 'No Sub Folder' rows are shown. No automation on that is done
    still since it may be expensive sometimes.

* Corrected underscores (mnemonics) on every menu and dialog.

* Fixed GTK+ 3.0 compatibility problems. Libfm can be compiled with Gtk
    2.18 ... 3.x and Glib 2.22+ currently (if glib < 2.26 or vala < 0.13
    still requires run configure --disable-actions). Added new switch to
    configure script --with-gtk=N where N is GTK+ generation to be used,
    may be either 2 or 3. Default is 2.

* Enabled option to Unmount removable media without ejecting it.

* Migrated menu:// support into built-in VFS. There will be support for
    menu editing functions later.

* Added search engine. Supports search:// URIs and has the UI represented
    by API fm_launch_search_simple().

* Full name in Icon View mode now shown in tooltip while long names are
    placed under icons in truncated form.

* Added ability to change columns of view. Works only for Detailed List
    View in FmStandardView widget for now. Implementation for other modes
    and widgets will come later on demand.

* Added a FmSortMode enumerator (similar to GtkSortType) with few modes
    specific fo file manager (ascending/descending is one of new modes).

* Sorting set/get functions moved from FmFolderView into FmFolderModel.
    Sorting isn't remembered by implementations of FmFolderView anymore
    so application should set sorting explicitly after creation of new
    FmFolderModel instance. Previously FmFolderView remembered it and no
    explicit setting was required.

* A lot of lesser bugfixes.


Changes on 1.0.1 since 1.0.0:

* Fixed slowness on loading and changing of very large folders.

* FmFolderView is converted into generic interface. Former FmFolderView
    is renamed into FmStandardView so APIs specific to it have changed
    their names and arguments. Old APIs left for compatibility reasons.
    New FmFolderView interface now contains methods to handle popups,
    keyboard and mouse gestures, including Cut/Copy/Paste operations.

* Fixed compatibility with systems that are a bit old so have neither
    decent Vala compiler nor GLib 2.26.

* Few lesser bugfixes.
