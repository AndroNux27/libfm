[High Priority]

* File operations: move, copy, trashing, ...
     Implement correct error handling.
     Already works for FmDirListJob.
     Confirm before deleting/trashing.
     Rename/overwrite files appropriately when destination file
     already exists. => done
     should provide multiple destination files for recovering trashed files.

* Dnd
     Dnd destination, drop site handling. => Almost done
     For drag source, use file:///~/.gvfs/ rather than its original
     URL scheme to be compatible with other programs => need more survey
     Refuse drop if the user doesn't has access to destination dir.
     Fix incorrect drop target item of icon view mode. => done
     Fix incorrect design of 'query-info' signal.
     Implement XDS support => done, but in a quite dirty way.

* Better file size calculations
     prevent divided by zero problem. (calculate percentage when total size = 0)
     Some remote or virtual files doesn't have block size and block count.

* Thumbnails, may be cached with hash table to speed up loading.
     A FmThumbnailJob is needed.

* API to empty trash (just deleting everything under trash:/// can make it.)

* Display paths in path entry with display name rather than real path

* Mount volumes and mount points when needed
     This already works with remote URLs.
     Need to be done for removable devices. => partially done
     Now mounting works when the user click on a volume in side pane.
     Not available yet in computer:///

* Browse History for 'Back' and 'Forward'. => almost done but still buggy

* A history menu => almost done but still buggy

* path resolution and canonicalization: convert ../ and ./ gracefully

* Popup menu for blank area of the folder view. => partially done

* Add "Create New" to popup menu of folder.

* Show available disk space in status bar => related to #26.

* FmBookmarks to manage and monitor bookmarks. => partially done.
     Need to refactor the API.

* Make libfm a real library. => partially done
     Need to seperate gtk+-dependet part from the core part.

* Change file type-application association in property dialog.
     partially done, need to let the user choose a custom application.

* Offer some global options like whether to use Trash bin or not to ease
     the development of file manager and all programs using this lib can
     all have consistent behavior.
     should we use lxconf? Not a good idea for now
     class FmConfig can handle this part => partially done
     Maybe we can utilize XClientMessage to send notifications and let
     all apps using libfm to reload the config files. (similar to gtkrc and qt-config)

* Handle special files like FIFO, socket, ...etc.
     partially done for local UNIX fileystems.

* FmFileMenu should provide special menu items for special paths
     For example:
     Add a "Recover" popup menu item for files in trash:///
     Provide totally different menus for items in computer:///
     Provide "Uninstall" for items in applications:/// (requires integration with package-kit)

* Need to display marks on the icons of symlinks to let the users
     know that they are symlinks

* File searching utility => Subclass FmFolder and provide FmSearchFiles
     The search result can be given to a GtkTreeModel for display.

* Add filter to FmFolderModel, so we can only show specific files.
     The API can be compatible with GtkFileFilter used by GtkFileChooser.
     The hidden parts can be stored in model->hidden GSequence.

* Update icons when gtk+ icon theme gets changed.



[Medium Priority]

* API renaming:
     when a returned value was allocated or ref_count is increased,
     the API should use _dup_ rather than _get_.

     currently there are inconsistent naming convention among different
     modules. _get_for_, new_from_, _get_from_, and simply _get_ are used
     in different places where APIs have similar behaviors.

* Better clipboard handling => almost done
     Can we be more compatible with GNOME and XFCE?
     Already compatible with KDE/Dolphin
     Partially compatible with gnome and xfce.
     Clipboard operation done by libfm doesn't seem to be noticed by
     nautilus. Cause? maybe related to clipboard monitoring?

* Custom actions for specific file types.
     integration with archivers is a must have, but how?
     Maybe we can use the implementation proposed by KDE.

* GtkFileChooser style path button bar. (can take the one in gtk)

* Bring some fallback icons (application-x-generic and folder) along with
     the package of libfm to work without icon themes.

* Warn the user for insufficient disk space before file operations.

* Support "Send To..."

* Auto-mounting

* Move applications associated with a file to a seperate sub menu if
     There are too many items.

* Support mount specific filesystem encoding in the future. Now we only
     handle UTF-8 for simplicity.
     Those settings can be stored in FmConfig?



[Low Priority]

* Add FmGesture to support mouse gesture. (low priority)
     Maybe this should in another lib to be used in other programs, too.

* Hiding computer:///, network:///, and disable trash:/// if gvfs is not
     available.

* Implement fm_list_concat_glist to add a GList* to FmList or to convert
     a GList to FmList by fm_list_new followed by fm_list_concat_glist()

* Expose a set of dbus interfaces/services so other applications can call
     libfm to do file operations without being linked with it.
     Or, this should be implemented in the level of file managers, like in pcmanfm?
     If this is going to be supported, write a freedesktop.org spec for it.

* Display tooltips for folder items

* Documentation, can be done with gtk-doc



[Very Low Priority]

* Provide a wizard to clean temporary files from the filesystem to get more
     usable disk space. => a disk cleaner is needed.
     This can be showed to the user when there is not available disk space.

* Periodically remove thumbnail caches
     Maybe it's a better idea to handle this in disk cleaner wizard.

* Enable showing .. in list view mode.

* Write a geany plugin to utilize the FmFolderView.

* Add a right pane to list all opened folders instead of using tabs.
     Quite useful for wide screen and can save taskbar space.
     Very convinient when you need to work with files in many different folders

* Support saving currently opened folders as a session, and the saved session
     file can be loaded later by double click on it.
     This is especially useful for developers and can be used for project management
