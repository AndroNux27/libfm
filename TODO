1. API renaming:
     when a returned value was allocated or ref_count is increased,
     the API should use _dup_ rather than _get_.

     currently there are inconsistent naming convention among different
     modules. _get_for_, new_from_, _get_from_, and simply _get_ are used
     in different places where APIs have similar behaviors.

2. Better clipboard handling => almost done
     Can we be more compatible with GNOME and XFCE?
     Already compatible with KDE/Dolphin
     Partially compatible with gnome and xfce.
     Clipboard operation done by libfm doesn't seem to be noticed by
     nautilus. Cause? maybe related to clipboard monitoring?

3. File operations: move, copy, trashing, ...
     Implement correct error handling.
     Already works for FmDirListJob.
     Confirm before deleting/trashing.
     Rename/overwrite files appropriately when destination file
     already exists.

4. Dnd
     Dnd destination, drop site handling. => Almost done
     For drag source, use file:///~/.gvfs/ rather than its original
     URL scheme to be compatible with other programs => need more survey

5. Better file size calculations
     prevent divided by zero problem. (calculate percentage when total size = 0)
     Some remote or virtual files doesn't have block size and block count.

6. File monitoring with cache
     use a global hash table to cache all file monitors and share them
     everywhere to prevent create many file monitors to monitor the same
     path.

8. FmPathCache:
     a general purpose cache to associated paths with already loaded
     data associated those paths such as thumbnails or file monitors
     to optimize memory usage and decrease duplicated I/O.

9. Thumbnails, may be cached with FmPathCache to speed up loading.
     A FmThumbnailJob is needed.

10.Custom actions for specific file types.
     integration with archivers is a must have

11.Auto-completion for path entry
     GFilenameCompleter is buggy. we need to develop our own.

12.API to empty trash (just deleting everything under trash:/// can make it.)

13.Display paths in path entry with display name rather than real path

14.Auto-mounting

15.Mount volumes and mount points when needed
     This already works with remote URLs.
     Need to be done for removable devices.

16.Browse History for 'Back' and 'Forward'.

17.A history menu

18.path resolution and canonicalization: convert ../ and ./ gracefully

19.Enable showing .. in list view mode. => low priority

20.Popup menu for blank area of the folder view. => partially done

21.Emit 'sel-changed' signal on FmFolderView object to let the main
     window update its status bar. => done

22.Implement fm_list_concat_glist to add a GList* to FmList or to convert
     a GList to FmList by fm_list_new followed by fm_list_concat_glist()

23.Emit pseudo 'changed' signals on file monitors which are not supported
     by gio/gvfs, such as some remote file systems, after we do some
     modifications in the dir.
     This can be used with file monitor cache.

24.Expose a set of dbus interfaces/services so other applications can call
     libfm to do file operations without being linked with it.
     Or, this should be implemented in the level of file managers, like in pcmanfm?
     If this is going to be supported, write a freedesktop.org spec for it.
     => low priority

25.Display tooltips for folder items

26.Warn the user for insufficient disk space before file operations.

27.Periodically remove thumbnail caches.

28.Show available disk space in status bar => related to #26.

29.FmBookmarks to manage and monitor bookmarks.

30.Make libfm a real library.

31.Bring some fallback icons (application-x-generic and folder) along with
     the package of libfm to work without icon themes.

32.Install our own special xml file to mime database to provide some
     frequently-seen filetypes which are not included in shared-mime-info.

33.Fix the broken accelerators: Alt+D to move to location bar.

34.GtkFileChooser style path button bar. (can take the one in gtk)
